{
 "Resources": {
  "SelfDestructLambdaServiceRole30C72166": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/SelfDestructLambda/ServiceRole/Resource"
   }
  },
  "SelfDestructLambdaFD015707": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "\nimport boto3\ndef handler(event, context):\n    cloudformation = boto3.client('cloudformation')\n    cloudformation.delete_stack(StackName='SingleEc2Stack-dev')\n        "
    },
    "Environment": {
     "Variables": {
      "STACK_NAME": "SingleEc2Stack-dev"
     }
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "SelfDestructLambdaServiceRole30C72166",
      "Arn"
     ]
    },
    "Runtime": "python3.9"
   },
   "DependsOn": [
    "SelfDestructLambdaServiceRole30C72166"
   ],
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/SelfDestructLambda/Resource"
   }
  },
  "SelfDestructRule02A1E133": {
   "Type": "AWS::Events::Rule",
   "Properties": {
    "ScheduleExpression": "rate(1 hour)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Fn::GetAtt": [
        "SelfDestructLambdaFD015707",
        "Arn"
       ]
      },
      "Id": "Target0"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/SelfDestructRule/Resource"
   }
  },
  "SelfDestructRuleAllowEventRuleSingleEc2StackSelfDestructLambda0953998A6A8D5ED9": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "SelfDestructLambdaFD015707",
      "Arn"
     ]
    },
    "Principal": "events.amazonaws.com",
    "SourceArn": {
     "Fn::GetAtt": [
      "SelfDestructRule02A1E133",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/SelfDestructRule/AllowEventRuleSingleEc2StackSelfDestructLambda0953998A"
   }
  },
  "anasdevrole50B19CF8": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/AmazonSSMManagedInstanceCore"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/anasdev-role/Resource"
   }
  },
  "dnsPolicy90BE57CE": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "route53:GetChange",
       "Effect": "Allow",
       "Resource": "arn:aws:route53:::hostedzone/"
      },
      {
       "Action": "route53:ChangeResourceRecordSets",
       "Effect": "Allow",
       "Resource": "arn:aws:route53:::hostedzone/"
      },
      {
       "Action": "route53:GetHostedZone",
       "Effect": "Allow",
       "Resource": "arn:aws:route53:::hostedzone/"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "dnsPolicy90BE57CE",
    "Roles": [
     {
      "Ref": "anasdevrole50B19CF8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/dnsPolicy/Resource"
   }
  },
  "ssmPolicy178E7BD0": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ssm:UpdateInstanceInformation",
        "ssmmessages:CreateControlChannel",
        "ssmmessages:CreateDataChannel",
        "ssmmessages:OpenControlChannel",
        "ssmmessages:OpenDataChannel"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ssmPolicy178E7BD0",
    "Roles": [
     {
      "Ref": "anasdevrole50B19CF8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/ssmPolicy/Resource"
   }
  },
  "anasdevsg66F650D8": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "SingleEc2Stack/anasdevsg",
    "GroupName": "anasdev-sg",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": "vpc-0d44a946489030483"
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/anasdevsg/Resource"
   }
  },
  "anasdevInstanceProfileA1A918F5": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "anasdevrole50B19CF8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/anasdev/InstanceProfile"
   }
  },
  "anasdev44D0FC15": {
   "Type": "AWS::EC2::Instance",
   "Properties": {
    "AvailabilityZone": "us-east-1a",
    "BlockDeviceMappings": [
     {
      "DeviceName": "/dev/xvda",
      "Ebs": {
       "VolumeSize": 100
      }
     }
    ],
    "IamInstanceProfile": {
     "Ref": "anasdevInstanceProfileA1A918F5"
    },
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "t3.micro",
    "SecurityGroupIds": [
     {
      "Fn::GetAtt": [
       "anasdevsg66F650D8",
       "GroupId"
      ]
     }
    ],
    "SubnetId": "subnet-0981e78cc29741361",
    "Tags": [
     {
      "Key": "domainName",
      "Value": ""
     },
     {
      "Key": "ec2Name",
      "Value": "anasdev"
     },
     {
      "Key": "hostedZoneID",
      "Value": ""
     },
     {
      "Key": "keyFile",
      "Value": "/home/anashakt/.ssh/id_rsa.pub"
     },
     {
      "Key": "keyName",
      "Value": "anasnec"
     },
     {
      "Key": "Name",
      "Value": "anasdev"
     },
     {
      "Key": "nickName",
      "Value": "anasdev"
     }
    ],
    "UserData": {
     "Fn::Base64": "#!/bin/bash\n#! /bin/bash -x\n# install critial tools\nsudo yum -y update\nsudo yum remove -y awscli # remove v1 to make way to install v2\nsudo yum -y install expect jq curl git\n# install AWS CLI\nwget \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -O \"awscliv2.zip\"\nunzip -o awscliv2.zip\nsudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\nrm -Rf aws awscliv2.zip\n# install SAM\nwget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip -O sam.zip\nunzip sam.zip -o -d sam-installation\nsudo ./sam-installation/install\nsam --version\nrm -Rf ./sam-installation sam.zip\n# install NVM\nexport HOME=/usr/local/bin\ncd /usr/local/bin\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\ncat << \"EOF\" >> /etc/profile\nNVM_DIR=/usr/local/bin/.nvm\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"\neval `ssh-agent -s`\nfor i in $HOME/.ssh/*.pem;\ndo\n    [ -f \"$i\" ] || break\n    ssh-add $i\ndone\nEOF\n\nexport HOME=/root\ncat << \"EOF\" >> $HOME/.bashrc\nsource /etc/profile\nsource $NVM_DIR/nvm.sh\nEOF\nsource $HOME/.bashrc\n\nnvm install 16\nnvm use 16\nnpm install -g npm nodejs typescript aws-sdk aws-cdk yarn\n\n# set local variables\nINSTANCE_ID=$(wget -qO- http://instance-data/latest/meta-data/instance-id)\nHOST=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=nickName\" | jq -r .Tags[].Value`\nDOMAIN=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=domainName\" | jq -r .Tags[].Value`\necho \"preserve_hostname: true\" >> /etc/cloud/cloud.cfg\nhostnamectl set-hostname $HOST.$DOMAIN\necho \"ssh-add $KEYFILE\" >> /etc/profile\n# configure DNS\ntouch /var/lib/cloud/scripts/per-boot/set-dns\nchmod +x /var/lib/cloud/scripts/per-boot/set-dns\ncat << \"EOF\" > /var/lib/cloud/scripts/per-boot/set-dns\n#!/bin/bash\nINSTANCE_ID=$(wget -qO- http://instance-data/latest/meta-data/instance-id)\nMY_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4/)\nDOMAIN=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=domainName\" | jq -r .Tags[].Value`\nHOST=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=nickName\" | jq -r .Tags[].Value`\nFQDN=$HOST.$DOMAIN\n/usr/local/bin/aws route53 change-resource-record-sets --hosted-zone-id \n --change-batch '{\n    \"Changes\":[{\n        \"Action\":\"UPSERT\",\n        \"ResourceRecordSet\":{\n            \"Name\": \"'$FQDN'\",\n            \"Type\":\"A\",\n            \"TTL\":10,\n            \"ResourceRecords\":[\n                {\n                    \"Value\": \"'$MY_IP'\"\n                }\n            ]\n        }\n        }]\n}'\nEOF\nvar/lib/cloud/scripts/per-boot/set-dns\n\n# to inspect what this script did, inspect /var/log/cloud-init-output.log\n\n\n\nmkdir -p  /home/ssm-user/.ssh; echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDHG9wbBDQm4jAJYccVZ7QFspGbIQGotLo1dIZvz1prppP2U4LrXy85hdPUa7BkxndMJ322i3eKeqLXrNE7hFEK65xdcZ4Cxb06FJJuAuN3blTmpv7frfR0PVXSS5nXXS1G/UeTwPEF/hT8k+908fyS+G0dnZLg/jwgnIOjFZRjX95WylW26CuYoW3ghsINkAkMcJTcvGxkDA3+1I1t1UfWEFKoOTi3ybSVAlIqWdVa5FPSW7eUIn8bJH64O4eTKvtvfVpQ1KpzrzOohlnTl6feibTcfXgYcSa0c0V2O3pIlHa1Y0hYa1sO5so91QRzmd3IdpUltjkY8zluvn6iZE6GK7Rp960oufL33cv27PmRzIdkxpjdiT/Hgr5iEZ6aPpVV77pcQdReTpdnSdg9j/CKD9ltHFzz0l/sj6kz1bISFidr0XD3N7wyBY0411YoOG/P5Z33/Ho1JSw4B/+3RTKydO6YCn/Tw9f1EkzsH3CItTwr0Wmxz0CXuBViQY52ecCDMpek36bh7vzA7BhF/M2VIMmeMiHZ4MWMkjxOvDwGOFLvLMrhEp0ZbU2V2zwdaX80sCTalIC7Qc5FaiFRSuJ/hmvaF+kS2/P51vnBepNgja1FIGJ/OhveUuT8Wq/tKuQm+BgDkmLhaiVCLfvvS0Pgh/MWI8TW02Tub+pYAsLkdw== anashakt@SEA-1801064134\" >> /home/ssm-user/.ssh/authorized_keys\n#! /bin/bash -x\n# install critial tools\nsudo yum -y update\nsudo yum remove -y awscli # remove v1 to make way to install v2\nsudo yum -y install expect jq curl git\n# install AWS CLI\nwget \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -O \"awscliv2.zip\"\nunzip -o awscliv2.zip\nsudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update\nrm -Rf aws awscliv2.zip\n# install SAM\nwget https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip -O sam.zip\nunzip sam.zip -o -d sam-installation\nsudo ./sam-installation/install\nsam --version\nrm -Rf ./sam-installation sam.zip\n# install NVM\nexport HOME=/usr/local/bin\ncd /usr/local/bin\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\ncat << \"EOF\" >> /etc/profile\nNVM_DIR=/usr/local/bin/.nvm\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"\neval `ssh-agent -s`\nfor i in $HOME/.ssh/*.pem;\ndo\n    [ -f \"$i\" ] || break\n    ssh-add $i\ndone\nEOF\n\nexport HOME=/root\ncat << \"EOF\" >> $HOME/.bashrc\nsource /etc/profile\nsource $NVM_DIR/nvm.sh\nEOF\nsource $HOME/.bashrc\n\nnvm install 16\nnvm use 16\nnpm install -g npm nodejs typescript aws-sdk aws-cdk yarn\n\n# set local variables\nINSTANCE_ID=$(wget -qO- http://instance-data/latest/meta-data/instance-id)\nHOST=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=nickName\" | jq -r .Tags[].Value`\nDOMAIN=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=domainName\" | jq -r .Tags[].Value`\necho \"preserve_hostname: true\" >> /etc/cloud/cloud.cfg\nhostnamectl set-hostname $HOST.$DOMAIN\necho \"ssh-add $KEYFILE\" >> /etc/profile\n# configure DNS\ntouch /var/lib/cloud/scripts/per-boot/set-dns\nchmod +x /var/lib/cloud/scripts/per-boot/set-dns\ncat << \"EOF\" > /var/lib/cloud/scripts/per-boot/set-dns\n#!/bin/bash\nINSTANCE_ID=$(wget -qO- http://instance-data/latest/meta-data/instance-id)\nMY_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4/)\nDOMAIN=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=domainName\" | jq -r .Tags[].Value`\nHOST=`aws ec2 describe-tags --filters \"Name=resource-id,Values=$INSTANCE_ID\" \"Name=key,Values=nickName\" | jq -r .Tags[].Value`\nFQDN=$HOST.$DOMAIN\n/usr/local/bin/aws route53 change-resource-record-sets --hosted-zone-id \n --change-batch '{\n    \"Changes\":[{\n        \"Action\":\"UPSERT\",\n        \"ResourceRecordSet\":{\n            \"Name\": \"'$FQDN'\",\n            \"Type\":\"A\",\n            \"TTL\":10,\n            \"ResourceRecords\":[\n                {\n                    \"Value\": \"'$MY_IP'\"\n                }\n            ]\n        }\n        }]\n}'\nEOF\nvar/lib/cloud/scripts/per-boot/set-dns\n\n# to inspect what this script did, inspect /var/log/cloud-init-output.log\n\n\n"
    }
   },
   "DependsOn": [
    "anasdevrole50B19CF8"
   ],
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/anasdev/Resource"
   }
  },
  "tagPollicy47586843": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "ec2:DescribeTags",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:aws:ec2:us-east-1:173630595002:instance/",
          {
           "Ref": "anasdev44D0FC15"
          }
         ]
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "tagPollicy47586843",
    "Roles": [
     {
      "Ref": "anasdevrole50B19CF8"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/tagPollicy/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1VPW2oDMQw8S/696u7SnKDQ0q8umwMUxauAEj+CZSUE47uHddOSfs1oRppBIwyvPfQbvEpnl1PneA9ll9GezEwSNVkyeJXv4tDvF4TyrsFmjsG8HcIznyh5FuEYqmH0UOboaDUaTtGxvbW9P/YZJGOwNKV4YEfV0IVCFiizPi61qXaEsiOrifPtI0U9r95/4TfqObbWVocJPWVK6/Cl+ay5RT9+qybEheAoL5exh2ELw+YozF3SkNkTzD94BwdrV9wmAQAA"
   },
   "Metadata": {
    "aws:cdk:path": "SingleEc2Stack/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "ec2instanceid": {
   "Value": {
    "Ref": "anasdev44D0FC15"
   }
  },
  "ec2instancepublicdnsname": {
   "Value": {
    "Fn::GetAtt": [
     "anasdev44D0FC15",
     "PublicDnsName"
    ]
   }
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}
